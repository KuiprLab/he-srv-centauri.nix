{
  config,
  pkgs,
  lib,
  ...
}: {
  # Enable sops
  sops = {
    # Path to the default sops file
    defaultSopsFile = ../secrets/secrets.yaml;

    # Configure default key to use for encryption
    age.keyFile = "/var/lib/sops-nix/key.txt";

    # Generate a key if it doesn't exist
    age.generateKey = true;

    # Define secrets directory for consistent access
    secretsDirectory = "/var/lib/sops-secrets"; 
    
    # Make the secrets directory available as an environment variable
    secretsDirectoryVariable = "SOPS_SECRETS_DIR";

    # Define secrets
    secrets = {
      # Discord webhook for notifications
      "discord-webhook" = {
        owner = "root";
        group = "root";
        mode = "0400";
      };

      # Authentication platform credentials
      "authentik-env" = {
        owner = "root";
        group = "root";
        mode = "0400";
        path = "/etc/docker-compose/stacks/.env";
      };

      # Database credentials
      "postgres-password" = {
        owner = "root";
        group = "root";
        mode = "0400";
      };

      # WireGuard VPN configuration
      "wireguard-env" = {
        owner = "root";
        group = "root";
        mode = "0400";
      };
      
      "wireguard-key" = {
        owner = "root";
        group = "root";
        mode = "0400";
      };

      # qBittorrent credentials
      "qbittorrent-credentials" = {
        owner = "root";
        group = "root";
        mode = "0400";
      };

      # Traefik environment variables
      "traefik-env" = {
        owner = "root";
        group = "root";
        mode = "0400";
        path = "/etc/docker-compose/stacks/traefik/.env";
      };

      # Unpacker configuration
      "unpacker-env" = {
        owner = "root";
        group = "root";
        mode = "0400";
      };

      # Decluttarr configuration (for media management)
      "decluttarr-env" = {
        owner = "root";
        group = "root";
        mode = "0400"; 
      };

      # API keys for media servers
      "sonarr-api-key" = {
        owner = "root";
        group = "root";
        mode = "0400";
      };

      "radarr-api-key" = {
        owner = "root";
        group = "root";
        mode = "0400";
      };

      "lidarr-api-key" = {
        owner = "root";
        group = "root"; 
        mode = "0400";
      };
    };

    # Define templates for substituting secrets in configuration files
    templates = {
      # Process qBittorrent configuration with secrets
      "qbittorrent-yaml" = {
        path = "/etc/docker-compose/stacks/qbittorrent.yaml";
        owner = "root";
        group = "root";
        mode = "0400";
        content = ''
          ${builtins.readFile ./stacks/qbittorrent.yaml}
        '';
      };

      # Process starr stack with secrets
      "starr-yaml" = {
        path = "/etc/docker-compose/stacks/starr.yaml";
        owner = "root";
        group = "root";
        mode = "0400";
        content = ''
          ${builtins.readFile ./stacks/starr.yaml} 
        '';
      };

      # Process authentik stack with secrets
      "authentik-yaml" = {
        path = "/etc/docker-compose/stacks/authentik.yaml";
        owner = "root";
        group = "root";
        mode = "0400";
        content = ''
          ${builtins.readFile ./stacks/authentik.yaml}
        '';
      };

      # Process traefik stack with secrets
      "traefik-yaml" = {
        path = "/etc/docker-compose/stacks/traefik.yaml";
        owner = "root"; 
        group = "root";
        mode = "0400";
        content = ''
          ${builtins.readFile ./stacks/traefik.yaml}
        '';
      };
    };
  };

  # Add helper script to create/update the secrets template
  system.activationScripts.generateSopsSecretsTemplate = ''
    mkdir -p ${config.sops.defaultSopsFile.dirOf}
    if [ ! -f ${config.sops.defaultSopsFile} ]; then
      cat > ${config.sops.defaultSopsFile} <<EOF
    # This file was generated by NixOS - modify using sops or justfile commands
    discord-webhook: DISCORD_WEBHOOK_TOKEN=your_discord_webhook_token_here

    authentik-env: |
      AUTHENTIK_SECRET_KEY=your_secret_key_here
      AUTHENTIK_ERROR_REPORTING__ENABLED=false
      PG_PASS=your_postgres_password_here
      PG_USER=authentik
      PG_DB=authentik

    postgres-password: your_postgres_password_here

    wireguard-env: |
      WIREGUARD_PRIVATE_KEY=your_wireguard_private_key_here
      WIREGUARD_ADDRESS=your_wireguard_address_here

    wireguard-key: your_wireguard_private_key_here

    qbittorrent-credentials: |
      QBITTORRENT_USERNAME=your_qbittorrent_username
      QBITTORRENT_PASSWORD=your_qbittorrent_password

    traefik-env: |
      BUNNY_API_KEY=your_bunny_api_key_here

    unpacker-env: |
      TZ=Europe/Berlin
      UN_LOG_FILE=/downloads/unpackerr.log
      UN_SONARR_0_URL=http://sonarr:8989
      UN_SONARR_0_API_KEY=your_sonarr_api_key_here
      UN_RADARR_0_URL=http://radarr:7878
      UN_RADARR_0_API_KEY=your_radarr_api_key_here

    decluttarr-env: |
      RADARR_API_KEY=your_radarr_api_key_here
      SONARR_API_KEY=your_sonarr_api_key_here
      LIDARR_API_KEY=your_lidarr_api_key_here
      QBITTORRENT_USERNAME=your_qbittorrent_username
      QBITTORRENT_PASSWORD=your_qbittorrent_password

    # Individual API keys for direct reference
    sonarr-api-key: your_sonarr_api_key_here
    radarr-api-key: your_radarr_api_key_here
    lidarr-api-key: your_lidarr_api_key_here
    EOF
      echo "Generated template secrets file at ${config.sops.defaultSopsFile}"
      echo "Please edit this file and encrypt it with sops before deployment"
    fi
  '';

  # Create directory structure for secrets
  system.activationScripts.createSecretsDirectories = ''
    mkdir -p ${config.sops.secretsDirectory}
    chmod 0700 ${config.sops.secretsDirectory}
  '';

  # Install sops and related tools
  environment.systemPackages = with pkgs; [
    sops
    age
    ssh-to-age
    gnupg
    jq
    yq
  ];
}
