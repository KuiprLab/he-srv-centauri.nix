# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  # sops.secrets."config.ini" = {
  #   sopsFile = ./config.ini;
  #   format = "ini";
  #   owner = "ubuntu";
  #   group = "users";
  #   key = "";
  #   path = "/home/ubuntu/soularr/config.ini";
  #   restartUnits = ["podman-soularr.service"];
  # };
  #

  myFolders = {
    soularr = {
      path = "/home/ubuntu/{soularr,slskd}";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll =
      if !config.networking.nftables.enable
      then "podman+"
      else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [53];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."slskd" = {
    image = "slskd/slskd";
    environment = {
      "SLSKD_REMOTE_CONFIGURATION" = "true";
    };
    volumes = [
      "/home/ubuntu/slskd:/app:rw"
      "/mnt/data/downloads:/downloads:rw"
      "/mnt/data/media/music:/music:rw"
    ];
    cmd = [
      "--generate-secret"
    ];
    ports = [
      "5030:5030/tcp"
      # "5031:5031/tcp"
      "50300:50300/tcp"
    ];

    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.slskd.entrypoints" = "websecure";
      "traefik.http.routers.slskd.middlewares" = "authelia@docker";
      "traefik.http.routers.slskd.rule" = "Host(`slskd.kuipr.de`)";
      "traefik.http.routers.slskd.tls.certresolver" = "myresolver";
      "traefik.http.services.slskd.loadbalancer.server.port" = "5030";
    };
    log-driver = "journald";
    dependsOn = [
      "gluetun"
    ];
    extraOptions = [
      "--network=container:gluetun"
      "--publish=127.0.0.1:5050:5050" # Exposes to host
    ];
  };
  systemd.services."podman-slskd" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-soulseek_default.service"
      "podman-gluetun.service"
    ];
    requires = [
      "podman-network-soulseek_default.service"
      "podman-gluetun.service"
    ];
    partOf = [
      "podman-compose-soulseek-root.target"
    ];
    wantedBy = [
      "podman-compose-soulseek-root.target"
    ];
  };
  virtualisation.oci-containers.containers."soularr" = {
    image = "budinjm/soularr:latest";
    environment = {
      "SCRIPT_INTERVAL" = "300";
      "TZ" = "Etc/UTC";
    };
    volumes = [
      "/home/ubuntu/soularr:/data:rw"
      "/mnt/data/downloads:/downloads:rw"
    ];
    user = "1000:1000";
    log-driver = "journald";
    extraOptions = [
      "--hostname=soularr"
      "--network-alias=soularr"
      "--network=soulseek_default"
      "--network=proxy"
    ];
  };
  systemd.services."podman-soularr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-soulseek_default.service"
    ];
    requires = [
      "podman-network-soulseek_default.service"
    ];
    partOf = [
      "podman-compose-soulseek-root.target"
    ];
    wantedBy = [
      "podman-compose-soulseek-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-soulseek_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f soulseek_default";
    };
    script = ''
      podman network inspect soulseek_default || podman network create soulseek_default
    '';
    partOf = ["podman-compose-soulseek-root.target"];
    wantedBy = ["podman-compose-soulseek-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-soulseek-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
