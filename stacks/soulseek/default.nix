# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, config, ... }:

{


  myFolders = {
    soularr = {
      path = "/home/ubuntu/{soularr,slskd}";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
  };


  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [ 53 ];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."slskd" = {
    image = "slskd/slskd";
    environment = {
      "SLSKD_REMOTE_CONFIGURATION" = "true";
    };
    volumes = [
      "/home/ubuntu/slskd:/app:rw"
      "/mnt/data/downloads:/downloads:rw"
      "/mnt/data/media/music:/music:rw"
    ];
    ports = [
      "5030:5030/tcp"
      "5031:5031/tcp"
      "50300:50300/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=slskd"
      "--network=soulseek_default"
      "--network=proxy"
    ];
  };
  systemd.services."podman-slskd" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-soulseek_default.service"
    ];
    requires = [
      "podman-network-soulseek_default.service"
    ];
    partOf = [
      "podman-compose-soulseek-root.target"
    ];
    wantedBy = [
      "podman-compose-soulseek-root.target"
    ];
  };
  virtualisation.oci-containers.containers."soularr" = {
    image = "mrusse08/soularr:latest";
    environment = {
      "SCRIPT_INTERVAL" = "300";
      "TZ" = "Etc/UTC";
    };
    volumes = [
      "/home/ubuntu/soularr:/data:rw"
      "/mnt/data/downloads:/downloads:rw"
    ];
    user = "1000:1000";
    log-driver = "journald";
    extraOptions = [
      "--hostname=soularr"
      "--network-alias=soularr"
      "--network=soulseek_default"
      "--network=proxy"
    ];
  };
  systemd.services."podman-soularr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-soulseek_default.service"
    ];
    requires = [
      "podman-network-soulseek_default.service"
    ];
    partOf = [
      "podman-compose-soulseek-root.target"
    ];
    wantedBy = [
      "podman-compose-soulseek-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-soulseek_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f soulseek_default";
    };
    script = ''
      podman network inspect soulseek_default || podman network create soulseek_default
    '';
    partOf = [ "podman-compose-soulseek-root.target" ];
    wantedBy = [ "podman-compose-soulseek-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-soulseek-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
