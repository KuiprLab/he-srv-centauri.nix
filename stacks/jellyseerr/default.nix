# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  myFolders = {
    jellyseer = {
      path = "/home/ubuntu/jellyseer";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
  };

  # Containers
  virtualisation.oci-containers.containers."jellyseerr" = {
    image = "docker.io/fallenbagel/jellyseerr:latest";
    environment = {
      "LOG_LEVEL" = "debug";
      "PORT" = "5055";
      "TZ" = "Asia/Tashkent";
    };
    volumes = [
      "/home/ubuntu/jellyseer:/app/config:rw"
    ];
    # ports = [
    #   "5055:5055/tcp"
    # ];

    labels = {
      "io.containers.autoupdate" = "registry";
      "traefik.enable" = "true";
      # "traefik.http.routers.jellyseerr.entrypoints" = "websecure";
      "traefik.http.routers.jellyseerr.entrypoints" = "anubis";
      "traefik.http.routers.jellyseerr.rule" = "Host(`jellyseerr.kuipr.de`)";
      # "traefik.http.routers.jellyseerr.tls.certresolver" = "myresolver";
      "traefik.http.services.jellyseerr.loadbalancer.server.port" = "5055";
    };
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=wget --no-verbose --tries=1 --spider http://localhost:5055/api/v1/status || exit 1"
      "--health-interval=15s"
      "--health-retries=3"
      "--health-start-period=20s"
      "--health-timeout=3s"
      "--network-alias=jellyseerr"
      "--network=jellyseer_default"
      "--network=jellyfin_default"
      "--network=proxy"
    ];
  };
  systemd.services."podman-jellyseerr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-jellyseer_default.service"
    ];
    requires = [
      "podman-network-jellyseer_default.service"
    ];
    partOf = [
      "podman-compose-jellyseerr-root.target"
    ];
    wantedBy = [
      "podman-compose-jellyseerr-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-jellyseer_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f jellyseer_default";
    };
    script = ''
      podman network inspect jellyseer_default || podman network create jellyseer_default
    '';
    partOf = ["podman-compose-jellyseerr-root.target"];
    wantedBy = ["podman-compose-jellyseerr-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-jellyseerr-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
