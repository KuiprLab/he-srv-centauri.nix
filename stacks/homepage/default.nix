# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  myFolders = {
    homepage = {
      path = "/home/ubuntu/homepage";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
  };
  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll =
      if !config.networking.nftables.enable
      then "podman+"
      else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [53];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."homepage" = {
    image = "ghcr.io/gethomepage/homepage:latest";
    volumes = [
      "/home/ubuntu/homepage:/app/config:rw"
      "${./settings.yaml}:/app/config/settings.yaml:ro"
      "${./services.yaml}:/app/config/services.yaml:ro"
      "${./docker.yaml}:/app/config/docker.yaml:ro"
      "/run/podman/podman.sock:/var/run/docker.sock"
    ];
    # ports = [
    #   "8080:8080/tcp"
    # ];
        environment = {
"HOMEPAGE_ALLOWED_HOSTS" = "kuipr.de";
        };

    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.homepage.entrypoints" = "websecure";
      "traefik.http.routers.homepage.rule" = "Host(`dash.kuipr.de`)";
      "traefik.http.routers.homepage.middlewares" = "authelia@docker";
      "traefik.http.routers.homepage.tls.certresolver" = "myresolver";
      "traefik.http.services.homepage.loadbalancer.server.port" = "8080";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=homepage"
      "--network=homepage_default"
      "--network=proxy"
    ];
  };
  systemd.services."podman-homepage" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-homepage_default.service"
    ];
    requires = [
      "podman-network-homepage_default.service"
    ];
    partOf = [
      "podman-compose-homepage-root.target"
    ];
    wantedBy = [
      "podman-compose-homepage-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-homepage_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f homepage_default";
    };
    script = ''
      podman network inspect homepage_default || podman network create homepage_default
    '';
    partOf = ["podman-compose-homepage-root.target"];
    wantedBy = ["podman-compose-homepage-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-homepage-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
