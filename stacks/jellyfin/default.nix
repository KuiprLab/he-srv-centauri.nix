# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  myFolders = {
    jellyfin = {
      path = "/home/ubuntu/jellyfin/{cache,config}";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll =
      if !config.networking.nftables.enable
      then "podman+"
      else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [53];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."jellyfin" = {
    image = "jellyfin/jellyfin";
    environment = {
      "JELLYFIN_PublishedServerUrl" = "https://jelly.kuipr.de";
    };
    volumes = [
      "/mnt/data/media:/media:rw"
      "/home/ubuntu/jellyfin/cache:/cache:rw"
      "/home/ubuntu/jellyfin/config:/config:rw"
      "${./system.xml}:/config/config/system.xml:ro"
      "${./network.xml}:/config/config/network.xml:ro"
      "${./branding.xml}:/config/config/branding.xml:ro"
    ];
    labels = {
      "traefik.enable" = "true";
      # "traefik.http.routers.jellyfin.entrypoints" = "websecure";
      "traefik.http.routers.jellyfin.entrypoints" = "anubis";
      "traefik.http.routers.jellyfin.rule" = "Host(`jelly.kuipr.de`)";
      # "traefik.http.routers.jellyfin.tls.certresolver" = "myresolver";
      "traefik.http.services.jellyfin.loadbalancer.server.port" = "8096";
      # "traefik.http.routers.jellyfin.middlewares" = "block-metrics@docker";
    };
    user = "0:0";
    log-driver = "journald";
    extraOptions = [
      "--add-host=host.docker.internal:host-gateway"
      "--network-alias=jellyfin"
      "--network=jellyfin_default"
      "--network=proxy"
    ];
  };
  systemd.services."podman-jellyfin" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-jellyfin_default.service"
    ];
    requires = [
      "podman-network-jellyfin_default.service"
    ];
    partOf = [
      "podman-compose-jellyfin-root.target"
    ];
    wantedBy = [
      "podman-compose-jellyfin-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-jellyfin_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f jellyfin_default";
    };
    script = ''
      podman network inspect jellyfin_default || podman network create jellyfin_default
    '';
    partOf = ["podman-compose-jellyfin-root.target"];
    wantedBy = ["podman-compose-jellyfin-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-jellyfin-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
