# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  myFolders = {
    n8n = {
      path = "/home/ubuntu/n8n";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll =
      if !config.networking.nftables.enable
      then "podman+"
      else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [53];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."n8n-n8n" = {
    image = "docker.n8n.io/n8nio/n8n";
    environment = {
      "GENERIC_TIMEZONE" = "Etc/UTC";
      "N8N_HOST" = "n8n.kuipr.de";
      "N8N_PORT" = "5678";
      "N8N_PROTOCOL" = "https";
      "NODE_ENV" = "production";
      "WEBHOOK_URL" = "https://n8n.kuipr.de/";
    };
    volumes = [
      "/home/ubuntu/n8n:/files:rw"
      "n8n_n8n_data:/home/node/.n8n:rw"
    ];
    # ports = [
    #   "127.0.0.1:5678:5678/tcp"
    # ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.middlewares.n8n.headers.SSLHost" = "kuipr.de";
      "traefik.http.middlewares.n8n.headers.SSLRedirect" = "true";
      "traefik.http.middlewares.n8n.headers.STSIncludeSubdomains" = "true";
      "traefik.http.middlewares.n8n.headers.STSPreload" = "true";
      "traefik.http.middlewares.n8n.headers.STSSeconds" = "315360000";
      "traefik.http.middlewares.n8n.headers.browserXSSFilter" = "true";
      "traefik.http.middlewares.n8n.headers.contentTypeNosniff" = "true";
      "traefik.http.middlewares.n8n.headers.forceSTSHeader" = "true";
      "traefik.http.routers.n8n.entrypoints" = "web,websecure";
      "traefik.http.routers.n8n.middlewares" = "authelia@docker";
      "traefik.http.routers.n8n.rule" = "Host(`n8n.kuipr.de`)";
      "traefik.http.routers.n8n.tls" = "true";
      "traefik.http.routers.n8n.tls.certresolver" = "myresolver";
      "traefik.http.services.slskd.loadbalancer.server.port" = "5678";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=n8n"
      "--network=n8n_default"
    ];
  };
  systemd.services."podman-n8n-n8n" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-n8n_default.service"
      "podman-volume-n8n_n8n_data.service"
    ];
    requires = [
      "podman-network-n8n_default.service"
      "podman-volume-n8n_n8n_data.service"
    ];
    partOf = [
      "podman-compose-n8n-root.target"
    ];
    wantedBy = [
      "podman-compose-n8n-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-n8n_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f n8n_default";
    };
    script = ''
      podman network inspect n8n_default || podman network create n8n_default
    '';
    partOf = ["podman-compose-n8n-root.target"];
    wantedBy = ["podman-compose-n8n-root.target"];
  };

  # Volumes
  systemd.services."podman-volume-n8n_n8n_data" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect n8n_n8n_data || podman volume create n8n_n8n_data
    '';
    partOf = ["podman-compose-n8n-root.target"];
    wantedBy = ["podman-compose-n8n-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-n8n-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
