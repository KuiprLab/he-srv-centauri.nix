# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  myFolders = {
    gatus = {
      path = "/home/ubuntu/gatus/{config,data}";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
  };

  sops.secrets."gatus.yaml" = {
    sopsFile = ./gatus.yaml;
    key = "";
    restartUnits = ["podman-gatus-gatus.service"];
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll =
      if !config.networking.nftables.enable
      then "podman+"
      else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [53];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."gatus-gatus" = {
    image = "twinproduction/gatus:latest";
    user = "0:0";  # Run as root user
    environment = {
      "TZ" = "Europe/Rome";
    };
    volumes = [
      "/home/ubuntu/gatus/config:/config:rw"
      "/run/secrets/gatus.yaml:/config/config.yaml:ro"
      "/home/ubuntu/gatus/data:/data:rw"
    ];
    labels = {
      "traefik.docker.network" = "proxy";
      "traefik.enable" = "true";
      "traefik.http.routers.gatus.entrypoints" = "websecure";
      "traefik.http.routers.gatus.middlewares" = "authelia@docker";
      "traefik.http.routers.gatus.rule" = "Host(`uptime.kuipr.de`)";
      "traefik.http.routers.gatus.tls.certresolver" = "myresolver";
      "traefik.http.services.gatus.loadbalancer.server.port" = "8080";
      "traefik.port" = "8080";
    };
    # ports = [
    #   "8080:8080/tcp"
    # ];
    log-driver = "journald";
    extraOptions = [
    "--network-alias=gatus"
    "--network=gatus_default"
    "--cap-add=CAP_SYS_ADMIN"  # Add necessary capabilities
    "--security-opt=seccomp=unconfined"  # Reduce security constraints
    ];
  };
  systemd.services."podman-gatus-gatus" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-gatus_default.service"
    ];
    requires = [
      "podman-network-gatus_default.service"
    ];
    partOf = [
      "podman-compose-gatus-root.target"
    ];
    wantedBy = [
      "podman-compose-gatus-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-gatus_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f gatus_default";
    };
    script = ''
      podman network inspect gatus_default || podman network create gatus_default
    '';
    partOf = ["podman-compose-gatus-root.target"];
    wantedBy = ["podman-compose-gatus-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-gatus-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
