# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  myFolders = {
    navidrome = {
      path = "/home/ubuntu/navidrome";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll =
      if !config.networking.nftables.enable
      then "podman+"
      else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [53];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."navidrome-navidrome" = {
    image = "deluan/navidrome:latest";
    volumes = [
      "/home/ubuntu/navidrome:/data:rw"
      "/mnt/data/media/music:/music:ro"
    ];
    # ports = [
    #   "4533:4533/tcp"
    # ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.navidrome.entrypoints" = "websecure";
      # "traefik.http.routers.navidrome.entrypoints" = "anubis";
      "traefik.http.routers.navidrome.rule" = "Host(`music.kuipr.de`)";
      "traefik.http.routers.navidrome.tls.certresolver" = "myresolver";
      "traefik.http.services.navidrome.loadbalancer.server.port" = "4533";
    };

    user = "1000:1000";
    log-driver = "journald";
    extraOptions = [
      "--network-alias=navidrome"
      "--network=navidrome_default"
      "--network=proxy"
    ];
  };
  systemd.services."podman-navidrome-navidrome" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-navidrome_default.service"
    ];
    requires = [
      "podman-network-navidrome_default.service"
    ];
    partOf = [
      "podman-compose-navidrome-root.target"
    ];
    wantedBy = [
      "podman-compose-navidrome-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-navidrome_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f navidrome_default";
    };
    script = ''
      podman network inspect navidrome_default || podman network create navidrome_default
    '';
    partOf = ["podman-compose-navidrome-root.target"];
    wantedBy = ["podman-compose-navidrome-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-navidrome-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
