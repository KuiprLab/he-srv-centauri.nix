# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll =
      if !config.networking.nftables.enable
      then "podman+"
      else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [53];
  };

  virtualisation.oci-containers.backend = "podman";

  sops.secrets."explo.env" = {
    sopsFile = ./explo.env;
    format = "dotenv";
    key = "";
    restartUnits = ["podman-explo.service"];
  };

  # Containers
  virtualisation.oci-containers.containers."explo" = {
    image = "ghcr.io/frostplexx/explo:latest";
    environment = {
      "CRON_SCHEDULE" = "15 00 * * 2";
      "TZ" = "UTC";
    };
    volumes = [
      "/run/secrets/explo.env:/opt/explo/.env"
      "/mnt/data/downloads:/slskd:rw"
      "/mnt/data/media/music:/data:rw"
    ];

    labels = {
      "traefik.http.services.explo.loadbalancer.server.port" = "1000";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=explo"
      "--network=explo_default"
      "--network=jellyfin_default"
      "--network=proxy"
    ];
  };
  systemd.services."podman-explo" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-explo_default.service"
    ];
    requires = [
      "podman-network-explo_default.service"
    ];
    partOf = [
      "podman-compose-explo-root.target"
    ];
    wantedBy = [
      "podman-compose-explo-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-explo_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f explo_default";
    };
    script = ''
      podman network inspect explo_default || podman network create explo_default
    '';
    partOf = ["podman-compose-explo-root.target"];
    wantedBy = ["podman-compose-explo-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-explo-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
