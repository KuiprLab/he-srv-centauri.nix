# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  myFolders = {
    cleanuparr = {
      path = "/home/ubuntu/cleanuparr";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll =
      if !config.networking.nftables.enable
      then "podman+"
      else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [53];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."cleanuparr" = {
    image = "ghcr.io/cleanuparr/cleanuparr:latest";
    environment = {
      "BASE_PATH" = "";
      "PGID" = "1000";
      "PORT" = "11011";
      "PUID" = "1000";
      "TZ" = "Etc/UTC";
      "UMASK" = "022";
    };
    volumes = [
      "/home/ubuntu/cleanuparr:/config:rw"
    ];
    # ports = [
    #   "11011:11011/tcp"
    # ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.cleanuparr.entrypoints" = "websecure";
      # "traefik.http.routers.cleanuparr.entrypoints" = "anubis";
      "traefik.http.routers.cleanuparr.rule" = "Host(`cleanuparr.kuipr.de`)";
      "traefik.http.routers.cleanuparr.tls.certresolver" = "myresolver";
      "traefik.http.services.cleanuparr.loadbalancer.server.port" = "11011";
      "traefik.http.routers.cleanuparr.middlewares" = "authelia@docker";
    };
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=curl-f http://localhost:11011/health"
      "--health-interval=30s"
      "--health-retries=3"
      "--health-start-period=30s"
      "--health-timeout=10s"
      "--network-alias=cleanuparr"
      "--network=proxy"
      "--network=cleanuparr_default"
    ];
  };
  systemd.services."podman-cleanuparr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-cleanuparr_default.service"
    ];
    requires = [
      "podman-network-cleanuparr_default.service"
    ];
    partOf = [
      "podman-compose-cleanuparr-root.target"
    ];
    wantedBy = [
      "podman-compose-cleanuparr-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-cleanuparr_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f cleanuparr_default";
    };
    script = ''
      podman network inspect cleanuparr_default || podman network create cleanuparr_default
    '';
    partOf = ["podman-compose-cleanuparr-root.target"];
    wantedBy = ["podman-compose-cleanuparr-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-cleanuparr-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
