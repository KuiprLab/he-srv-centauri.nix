# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  # Runtime
  sops.secrets = {
    "anubis.env" = {
      sopsFile = ./anubis.env;
      format = "dotenv";
      key = "";
      restartUnits = ["podman-anubis-default.service"];
    };
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll =
      if !config.networking.nftables.enable
      then "podman+"
      else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [53];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."anubis-default" = {
    image = "ghcr.io/techarohq/anubis:latest";
    environmentFiles = [
      "${config.sops.secrets."anubis.env".path}"
    ];
    ports = [
      "8923:8923/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=anubis"
      "--network=proxy"
    ];
  };
  systemd.services."podman-anubis-default" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-anubis-root.target"
    ];
    wantedBy = [
      "podman-compose-anubis-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-anubis-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
