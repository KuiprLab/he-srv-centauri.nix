# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {


  myFolders = {
    lidarr = {
      path = "/home/ubuntu/{lidarr,soularr,slskd}";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
    
    music = {
      path = "/mnt/data/music_download";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
  };
  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll =
      if !config.networking.nftables.enable
      then "podman+"
      else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [53];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."lidarr" = {
    image = "lscr.io/linuxserver/lidarr:latest";
    environment = {
      "PGID" = "1000";
      "PUID" = "1000";
      "TZ" = "Etc/UTC";
    };
    volumes = [
      "/home/ubuntu/lidarr:/config:rw"
      "/mnt/data/media/music:/data:rw"
      "/mnt/data/music_download:/downloads:rw"
    ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.lidarr.entrypoints" = "websecure";
      "traefik.http.routers.lidarr.middlewares" = "authelia@docker";
      "traefik.http.routers.lidarr.rule" = "Host(`lidarr.kuipr.de`)";
      "traefik.http.routers.lidarr.tls.certresolver" = "myresolver";
      "traefik.http.services.lidarr.loadbalancer.server.port" = "8686";
    };
    dependsOn = [
      "slskd"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=lidarr"
      "--network=lidarr_default"
      "--network=proxy"
    ];
  };
  systemd.services."podman-lidarr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-lidarr_default.service"
    ];
    requires = [
      "podman-network-lidarr_default.service"
    ];
    partOf = [
      "podman-compose-lidarr-root.target"
    ];
    wantedBy = [
      "podman-compose-lidarr-root.target"
    ];
  };
  virtualisation.oci-containers.containers."slskd" = {
    image = "slskd/slskd";
    environment = {
      "SLSKD_REMOTE_CONFIGURATION" = "true";
    };
    volumes = [
      "/home/ubuntu/slskd:/app:rw"
      "/mnt/data/media/music:/data:rw"
      "/mnt/data/music_download:/downloads:rw"
    ];
    ports = [
      # "5030:5030/tcp"
      # "5031:5031/tcp"
      "50300:50300/tcp"
    ];

    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.slskd.entrypoints" = "websecure";
      "traefik.http.routers.slskd.middlewares" = "authelia@docker";
      "traefik.http.routers.slskd.rule" = "Host(`slskd.kuipr.de`)";
      "traefik.http.routers.slskd.tls.certresolver" = "myresolver";
      "traefik.http.services.slskd.loadbalancer.server.port" = "5030";
    };
    dependsOn = [
      "gluetun"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:gluetun"
    ];
  };
  systemd.services."podman-slskd" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-lidarr-root.target"
    ];
    wantedBy = [
      "podman-compose-lidarr-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-lidarr_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f lidarr_default";
    };
    script = ''
      podman network inspect lidarr_default || podman network create lidarr_default
    '';
    partOf = ["podman-compose-lidarr-root.target"];
    wantedBy = ["podman-compose-lidarr-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-lidarr-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
