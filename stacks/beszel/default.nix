# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  myFolders = {
    beszel = {
      path = "/home/ubuntu/{beszel_data,beszel_socket}";
      owner = "ubuntu";
      group = "users";
      mode = "0755";
    };
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll =
      if !config.networking.nftables.enable
      then "podman+"
      else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [53];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."beszel" = {
    image = "henrygd/beszel:latest";
    volumes = [
      "/home/ubuntu/beszel_data:/beszel_data:rw"
      "/home/ubuntu/beszel_socket:/beszel_socket:rw"
    ];
    # ports = [
    #   "8090:8090/tcp"
    # ];
    labels = {
      "traefik.enable" = "true";
      # "traefik.http.routers.beszel.entrypoints" = "websecure";
      "traefik.http.routers.beszel.entrypoints" = "anubis";
      "traefik.http.routers.beszel.rule" = "Host(`beszel.kuipr.de`)";
      # "traefik.http.routers.beszel.tls.certresolver" = "myresolver";
      "traefik.http.services.beszel.loadbalancer.server.port" = "8090";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=beszel"
      "--network=beszel_default"
    ];
  };
  systemd.services."podman-beszel" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-beszel_default.service"
    ];
    requires = [
      "podman-network-beszel_default.service"
    ];
    partOf = [
      "podman-compose-beszel-root.target"
    ];
    wantedBy = [
      "podman-compose-beszel-root.target"
    ];
  };
  virtualisation.oci-containers.containers."beszel-agent" = {
    image = "henrygd/beszel-agent:latest";
    environment = {
      # Host/IP as set above ☝️ on the dashboard; select 'Binary'.
      "KEY" = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINtCehsgIJdTJr1Eqds8ZMWSb1YgNtkjf5s91eZO39jB";
      "LISTEN" = "/beszel_socket/beszel.sock";
    };
    volumes = [
      "/home/ubuntu/beszel_socket:/beszel_socket:rw"
      "/var/run/docker.sock:/var/run/docker.sock:ro"
    ];

    labels = {
      # Dummy port otherwise traefik gets mad
      "traefik.http.services.beszel_agent.loadbalancer.server.port" = "1337";
    };
    log-driver = "journald";
    extraOptions = [
      "--network=host"
    ];
  };
  systemd.services."podman-beszel-agent" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-beszel-root.target"
    ];
    wantedBy = [
      "podman-compose-beszel-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-beszel_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f beszel_default";
    };
    script = ''
      podman network inspect beszel_default || podman network create beszel_default
    '';
    partOf = ["podman-compose-beszel-root.target"];
    wantedBy = ["podman-compose-beszel-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-beszel-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
